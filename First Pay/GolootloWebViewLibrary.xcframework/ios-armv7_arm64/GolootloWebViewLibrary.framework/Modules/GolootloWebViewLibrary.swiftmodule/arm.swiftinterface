// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.2.4 (swiftlang-1103.0.32.9 clang-1103.0.32.53)
// swift-module-flags: -target armv7-apple-ios9.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name GolootloWebViewLibrary
import AVFoundation
import CoreLocation
import Foundation
@_exported import GolootloWebViewLibrary
import Swift
import UIKit
import WebKit
@_hasMissingDesignatedInitializers @objc public class GolootloWebController : UIKit.UIViewController, WebKit.WKNavigationDelegate, CoreLocation.CLLocationManagerDelegate {
  @objc public var navigationAttributedTitle: Foundation.NSAttributedString
  @objc public var webView: WebKit.WKWebView? {
    @objc get
    @objc set
  }
  @objc public init(webURL: Foundation.URL, delegate: GolootloWebViewLibrary.GolootloEventDelegate)
  @objc override dynamic public func loadView()
  @objc override dynamic public func viewDidLoad()
  @objc deinit
  @objc override dynamic public func viewWillAppear(_ animated: Swift.Bool)
  @objc override dynamic public func viewDidAppear(_ animated: Swift.Bool)
  @objc override dynamic public func viewDidDisappear(_ animated: Swift.Bool)
  @objc override dynamic public func viewWillDisappear(_ animated: Swift.Bool)
  @objc public func addNavigationBar(leftButtons: [UIKit.UIBarButtonItem]? = nil, rightButtons: [UIKit.UIBarButtonItem]? = nil)
  @objc public func refreshWebView()
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
}
extension GolootloWebController : WebKit.WKScriptMessageHandler {
  @objc dynamic public func userContentController(_ userContentController: WebKit.WKUserContentController, didReceive message: WebKit.WKScriptMessage)
}
extension GolootloWebController {
  @objc override dynamic public func observeValue(forKeyPath keyPath: Swift.String?, of object: Any?, change: [Foundation.NSKeyValueChangeKey : Any]?, context: Swift.UnsafeMutableRawPointer?)
  @objc dynamic public func webView(_ webView: WebKit.WKWebView, didFailProvisionalNavigation navigation: WebKit.WKNavigation!, withError error: Swift.Error)
  @objc dynamic public func webView(_ webView: WebKit.WKWebView, decidePolicyFor navigationAction: WebKit.WKNavigationAction, decisionHandler: @escaping (WebKit.WKNavigationActionPolicy) -> Swift.Void)
  @objc dynamic public func webView(_ webView: WebKit.WKWebView, didFinish navigation: WebKit.WKNavigation!)
  @objc dynamic public func webView(_ webView: WebKit.WKWebView, didFail navigation: WebKit.WKNavigation!, withError error: Swift.Error)
  @objc dynamic public func webView(_ webView: WebKit.WKWebView, didCommit navigation: WebKit.WKNavigation!)
  @objc dynamic public func webViewWebContentProcessDidTerminate(_ webView: WebKit.WKWebView)
}
extension GolootloWebController : UIKit.UIScrollViewDelegate {
  @objc dynamic public func viewForZooming(in scrollView: UIKit.UIScrollView) -> UIKit.UIView?
  @objc dynamic public func scrollViewWillBeginZooming(_ scrollView: UIKit.UIScrollView, with view: UIKit.UIView?)
}
@objc public protocol GolootloEventDelegate {
  @objc func golootlo(event: Swift.String)
  @objc func golootloViewDidLoad(animated: Swift.Bool)
  @objc func golootloViewWillAppear(_ animated: Swift.Bool)
  @objc func golootloViewDidAppear(_ animated: Swift.Bool)
  @objc func golootloViewDidDisappear(_ animated: Swift.Bool)
  @objc func golootloViewWillDisappear(_ animated: Swift.Bool)
  @objc func golootloWillMoveFromParent()
}
extension URL {
  public var queryParameters: [Swift.String : Swift.String]? {
    get
  }
}
extension UIView {
  public func removeAllConstraints()
  @discardableResult
  public func left(toAnchor anchor: UIKit.NSLayoutXAxisAnchor, space: CoreGraphics.CGFloat = 0) -> UIKit.NSLayoutConstraint
  @discardableResult
  public func left(toView view: UIKit.UIView, space: CoreGraphics.CGFloat = 0) -> UIKit.NSLayoutConstraint
  @discardableResult
  public func right(toAnchor anchor: UIKit.NSLayoutXAxisAnchor, space: CoreGraphics.CGFloat = 0) -> UIKit.NSLayoutConstraint
  @discardableResult
  public func right(toView view: UIKit.UIView, space: CoreGraphics.CGFloat = 0) -> UIKit.NSLayoutConstraint
  @discardableResult
  public func top(toAnchor anchor: UIKit.NSLayoutYAxisAnchor, space: CoreGraphics.CGFloat = 0) -> UIKit.NSLayoutConstraint
  @discardableResult
  public func top(toView view: UIKit.UIView, space: CoreGraphics.CGFloat = 0) -> UIKit.NSLayoutConstraint
  @discardableResult
  public func topLeft(toView view: UIKit.UIView, top: CoreGraphics.CGFloat = 0, left: CoreGraphics.CGFloat = 0) -> [UIKit.NSLayoutConstraint]
  @discardableResult
  public func topRight(toView view: UIKit.UIView, top: CoreGraphics.CGFloat = 0, right: CoreGraphics.CGFloat = 0) -> [UIKit.NSLayoutConstraint]
  @discardableResult
  public func bottomRight(toView view: UIKit.UIView, bottom: CoreGraphics.CGFloat = 0, right: CoreGraphics.CGFloat = 0) -> [UIKit.NSLayoutConstraint]
  @discardableResult
  public func bottomLeft(toView view: UIKit.UIView, bottom: CoreGraphics.CGFloat = 0, left: CoreGraphics.CGFloat = 0) -> [UIKit.NSLayoutConstraint]
  @discardableResult
  public func bottom(toAnchor anchor: UIKit.NSLayoutYAxisAnchor, space: CoreGraphics.CGFloat = 0) -> UIKit.NSLayoutConstraint
  @discardableResult
  public func bottom(toView view: UIKit.UIView, space: CoreGraphics.CGFloat = 0) -> UIKit.NSLayoutConstraint
  @discardableResult
  public func verticalSpacing(toView view: UIKit.UIView, space: CoreGraphics.CGFloat = 0) -> UIKit.NSLayoutConstraint
  @discardableResult
  public func horizontalSpacing(toView view: UIKit.UIView, space: CoreGraphics.CGFloat = 0) -> UIKit.NSLayoutConstraint
  @discardableResult
  public func leftHorizontalSpacing(toView view: UIKit.UIView, space: CoreGraphics.CGFloat = 0) -> UIKit.NSLayoutConstraint
  public func size(_ size: CoreGraphics.CGSize)
  public func size(toView view: UIKit.UIView, greater: CoreGraphics.CGFloat = 0)
  public func square(edge: CoreGraphics.CGFloat)
  public func square()
  @discardableResult
  public func width(_ width: CoreGraphics.CGFloat) -> UIKit.NSLayoutConstraint
  @discardableResult
  public func width(toDimension dimension: UIKit.NSLayoutDimension, multiplier: CoreGraphics.CGFloat = 1, greater: CoreGraphics.CGFloat = 0) -> UIKit.NSLayoutConstraint
  @discardableResult
  public func width(toView view: UIKit.UIView, multiplier: CoreGraphics.CGFloat = 1, greater: CoreGraphics.CGFloat = 0) -> UIKit.NSLayoutConstraint
  @discardableResult
  public func height(_ height: CoreGraphics.CGFloat) -> UIKit.NSLayoutConstraint
  @discardableResult
  public func height(toDimension dimension: UIKit.NSLayoutDimension, multiplier: CoreGraphics.CGFloat = 1, greater: CoreGraphics.CGFloat = 0) -> UIKit.NSLayoutConstraint
  @discardableResult
  public func height(toView view: UIKit.UIView, multiplier: CoreGraphics.CGFloat = 1, greater: CoreGraphics.CGFloat = 0) -> UIKit.NSLayoutConstraint
  @discardableResult
  public func centerX(toView view: UIKit.UIView, space: CoreGraphics.CGFloat = 0) -> UIKit.NSLayoutConstraint
  @discardableResult
  public func centerX(toAnchor anchor: UIKit.NSLayoutXAxisAnchor, space: CoreGraphics.CGFloat = 0) -> UIKit.NSLayoutConstraint
  public func center(toView view: UIKit.UIView, space: CoreGraphics.CGFloat = 0)
  @discardableResult
  public func centerY(toView view: UIKit.UIView, space: CoreGraphics.CGFloat = 0) -> UIKit.NSLayoutConstraint
  @discardableResult
  public func centerY(toAnchor anchor: UIKit.NSLayoutYAxisAnchor, space: CoreGraphics.CGFloat = 0) -> UIKit.NSLayoutConstraint
  public func horizontal(toView view: UIKit.UIView, space: CoreGraphics.CGFloat = 0)
  public func horizontal(toView view: UIKit.UIView, leftPadding: CoreGraphics.CGFloat, rightPadding: CoreGraphics.CGFloat)
  public func vertical(toView view: UIKit.UIView, space: CoreGraphics.CGFloat = 0)
  public func vertical(toView view: UIKit.UIView, topPadding: CoreGraphics.CGFloat, bottomPadding: CoreGraphics.CGFloat)
  public func fill(toView view: UIKit.UIView, space: UIKit.UIEdgeInsets = .zero)
}
